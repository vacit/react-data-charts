{"version":3,"sources":["charts/LineChart.js","helpers.js","charts/PieChart.js","optionObjects/pieBaseObj.js","optionObjects/lineBaseObj.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","props","option","notMerge","lazyUpdate","style","height","DATA_URL","fields","getData","a","fetch","response","json","PieChart","pieBaseObj","title","text","subtext","left","tooltip","trigger","formatter","legend","type","orient","right","top","bottom","data","selected","series","radius","center","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","lineBaseObj","axisPointer","label","show","position","pos","params","el","elRect","size","obj","viewSize","xAxis","nameLocation","axisLabel","yAxis","lineStyle","color","name","smooth","areaStyle","App","getNames","names","result","forEach","push","hotelname","getDistribution","uniqueNames","uniqueCount","distribution","reduce","acum","cur","Object","assign","getPieOption","commentCount","legendData","seriesData","map","index","value","state","pieOption","lineOption1","lineOption2","then","basePrice","baseprice","commentcount","console","log","setState","axisTick","alignWithLabel","rotate","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9178ae65.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nconst LineChart = (props) => {\r\n    return (\r\n        <div >\r\n            <ReactEcharts \r\n                option={props}\r\n                notMerge={true}\r\n                lazyUpdate={true}\r\n                // theme={'dark'}\r\n                // showLoading ={true}\r\n                style={{ height: '400px' }}\r\n            // onChartReady={this.onChartReadyCallback}\r\n            // onEvents={EventsDict}\r\n            // opts={}\r\n            />\r\n            <br />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LineChart;","const url = 'http://localhost:3000/hotels/'\r\n\r\nconst DATA_URL = fields => {\r\n    return `${url}?fields=${fields}`\r\n}\r\n\r\nexport const getData = async (fields) => {\r\n    const response = await fetch(DATA_URL(fields));\r\n    return response.json()\r\n};","import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nconst PieChart = (props) => {\r\n    return (\r\n        <div>\r\n            <ReactEcharts\r\n                option={props}\r\n                notMerge={true}\r\n                lazyUpdate={true}\r\n                // theme={'dark'}\r\n                // showLoading ={true}\r\n                style={{ height: '400px',  }}\r\n            // onChartReady={this.onChartReadyCallback}\r\n            // onEvents={EventsDict}\r\n            // opts={}\r\n            />\r\n            <br />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PieChart;\r\n\r\n","export const pieBaseObj = {\r\n    title: {\r\n        text: 'Comments Statistics',\r\n        subtext: 'How many comment every hotel has',\r\n        left: 'left'\r\n    },\r\n    tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{b} : ({d}%) <br/> Comment : {c} ',\r\n    },\r\n    legend: {\r\n        type: 'scroll',\r\n        orient: 'vertical',\r\n        right: 10,\r\n        top: 20,\r\n        bottom: 20,\r\n        data: [],\r\n\r\n        selected: {}\r\n    },\r\n    series: [\r\n        {\r\n            type: 'pie',\r\n            radius: '80%',\r\n            center: ['40%', '50%'],\r\n            data: [],\r\n            emphasis: {\r\n                itemStyle: {\r\n                    shadowBlur: 10,\r\n                    shadowOffsetX: 0,\r\n                    shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};","export const lineBaseObj = {\r\n    title: {\r\n        text: 'Distribution',\r\n        subtext: 'Occurrence above 20 in a sample search result'\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n                show: false\r\n            }\r\n        },\r\n        formatter: '{b0}<br /> Total: {c0} Entries found',\r\n        position: function (pos, params, el, elRect, size) {\r\n            var obj = { top: 60 };\r\n            obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 80;\r\n            return obj;\r\n        },\r\n    },\r\n\r\n    xAxis: {\r\n\r\n        nameLocation: 'center',\r\n        type: 'category',\r\n        data: [],\r\n\r\n\r\n        axisLabel: {\r\n            show: false,\r\n        }\r\n    },\r\n    yAxis: {\r\n        type: 'value',\r\n    },\r\n    lineStyle: {\r\n        color: 'green'\r\n    },\r\n    series: [\r\n        {\r\n            name: 'Repetition',\r\n            type: 'line',\r\n            smooth: true,\r\n            data: [],\r\n            areaStyle: {\r\n                color: 'green'\r\n            }\r\n\r\n\r\n        }\r\n    ]\r\n};","import React, { Component } from 'react';\r\nimport LineChart from './charts/LineChart';\r\nimport { getData } from './helpers';\r\nimport PieChart from './charts/PieChart';\r\nimport { pieBaseObj } from './optionObjects/pieBaseObj'\r\nimport { lineBaseObj } from './optionObjects/lineBaseObj'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pieOption: {},\r\n            lineOption1: {},\r\n            lineOption2: {},\r\n            data: {},\r\n\r\n        }\r\n    }\r\n\r\n\r\n    getNames = data => {\r\n        let names = [];\r\n        data.result.forEach(obj => {\r\n            names.push(obj.hotelname)\r\n        });\r\n        return names\r\n    }\r\n\r\n\r\n    getDistribution = data => {\r\n        let uniqueNames = [];\r\n        let uniqueCount = [];\r\n\r\n        const distribution = data.reduce((acum, cur) => Object.assign(acum, { [cur]: (acum[cur] | 0) + 1 }), {});\r\n        for (let el in distribution) {\r\n            if (distribution[el] > 20) {\r\n                uniqueNames.push(el)\r\n                uniqueCount.push(distribution[el])\r\n            }\r\n        }\r\n        return {\r\n            uniqueNames,\r\n            uniqueCount\r\n        }\r\n    }\r\n\r\n    getPieOption = (names, commentCount) => {\r\n        let legendData = [];\r\n        let seriesData = [];\r\n        let selected = {};\r\n        names.map((name, index) => {\r\n            legendData.push(name);\r\n            seriesData.push({\r\n                name: name,\r\n                value: commentCount[index]\r\n            });\r\n            selected[name] = index < 10;\r\n\r\n        });\r\n        return {\r\n            legendData,\r\n            seriesData,\r\n            selected\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        getData('hotelname,baseprice,commentcount').then((data) => {\r\n            const names = data.result.hotelname;\r\n            const basePrice = data.result.baseprice;\r\n            const commentCount = data.result.commentcount;\r\n            const { uniqueNames, uniqueCount } = this.getDistribution(names);\r\n            // console.log(names, basePrice, uniqueCount, data)\r\n            const pieOption = this.getPieOption(uniqueNames, uniqueCount)\r\n            console.log(pieOption)\r\n            //#region \r\n            this.setState({\r\n                pieOption: {\r\n                    ...pieBaseObj,\r\n                    legend: {\r\n                        ...pieBaseObj.legend,\r\n                        data: pieOption.legendData,\r\n                        selected: pieOption.selected\r\n                    },\r\n                    series: [\r\n                        {\r\n                            ...pieBaseObj.series[0],\r\n                            data: pieOption.seriesData,\r\n                        }\r\n                    ]\r\n                },\r\n                lineOption1: {\r\n                    ...lineBaseObj,\r\n                    xAxis: {\r\n                        ...lineBaseObj.xAxis,\r\n                        data: uniqueNames,\r\n                    },\r\n                    series: [\r\n                        {\r\n                            ...lineBaseObj.series[0],\r\n                            data: uniqueCount,\r\n                        }\r\n                    ]\r\n                },\r\n                lineOption2: {\r\n                    title: {\r\n                        text: 'Base Price',\r\n                        subtext: 'Hotels base price in a sample search result'\r\n                    },\r\n                    xAxis: {\r\n\r\n                        type: 'category',\r\n                        data: names,\r\n                        axisTick: {\r\n                            alignWithLabel: true\r\n                        },\r\n                        axisLabel: {\r\n                            rotate: -90\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        type: 'value',\r\n\r\n                    },\r\n                    series: [{\r\n                        data: basePrice,\r\n                        type: 'line'\r\n                    }]\r\n                },\r\n\r\n\r\n                data,\r\n            })\r\n            //#endregion\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ 'padding': '20px' }} className=\"App\" >\r\n                <header className=\"App-header\">\r\n                    <PieChart {...this.state.pieOption}></PieChart>\r\n                    <LineChart {...this.state.lineOption1}></LineChart>\r\n                    <LineChart {...this.state.lineOption2}></LineChart>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}